// -*- C++ -*-
//===-------------------------- hq_iterator -------------------------------===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//

#ifndef _LIBCPP_HQ_ITERATOR
#define _LIBCPP_HQ_ITERATOR

/*
    iterator synopsis

namespace std
{

}  // std

*/

#include <iterator>

#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)
#pragma GCC system_header
#endif

_LIBCPP_BEGIN_NAMESPACE_STD

// __hq_wrap_iter

template <class _Iter>
class __hq_wrap_iter;

template <class _Iter1, class _Iter2>
_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG bool
operator==(const __hq_wrap_iter<_Iter1>&,
           const __hq_wrap_iter<_Iter2>&) _NOEXCEPT;

template <class _Iter1, class _Iter2>
_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG bool
operator<(const __hq_wrap_iter<_Iter1>&,
          const __hq_wrap_iter<_Iter2>&) _NOEXCEPT;

template <class _Iter1, class _Iter2>
_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG bool
operator!=(const __hq_wrap_iter<_Iter1>&,
           const __hq_wrap_iter<_Iter2>&) _NOEXCEPT;

template <class _Iter1, class _Iter2>
_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG bool
operator>(const __hq_wrap_iter<_Iter1>&,
          const __hq_wrap_iter<_Iter2>&) _NOEXCEPT;

template <class _Iter1, class _Iter2>
_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG bool
operator>=(const __hq_wrap_iter<_Iter1>&,
           const __hq_wrap_iter<_Iter2>&) _NOEXCEPT;

template <class _Iter1, class _Iter2>
_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG bool
operator<=(const __hq_wrap_iter<_Iter1>&,
           const __hq_wrap_iter<_Iter2>&) _NOEXCEPT;

#ifndef _LIBCPP_CXX03_LANG
template <class _Iter1, class _Iter2>
_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG auto
operator-(const __hq_wrap_iter<_Iter1>& __x,
          const __hq_wrap_iter<_Iter2>& __y) _NOEXCEPT
    -> decltype(__x.base() - __y.base());
#else
template <class _Iter1, class _Iter2>
_LIBCPP_INLINE_VISIBILITY typename __hq_wrap_iter<_Iter1>::difference_type
operator-(const __hq_wrap_iter<_Iter1>&,
          const __hq_wrap_iter<_Iter2>&) _NOEXCEPT;
#endif

template <class _Iter>
_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG __hq_wrap_iter<_Iter>
operator+(typename __hq_wrap_iter<_Iter>::difference_type,
          __hq_wrap_iter<_Iter>) _NOEXCEPT;

template <class _Ip, class _Op>
_Op _LIBCPP_INLINE_VISIBILITY copy(_Ip, _Ip, _Op);
template <class _B1, class _B2>
_B2 _LIBCPP_INLINE_VISIBILITY copy_backward(_B1, _B1, _B2);
template <class _Ip, class _Op>
_Op _LIBCPP_INLINE_VISIBILITY move(_Ip, _Ip, _Op);
template <class _B1, class _B2>
_B2 _LIBCPP_INLINE_VISIBILITY move_backward(_B1, _B1, _B2);

#if _LIBCPP_DEBUG_LEVEL < 2

template <class _Tp>
_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG
    typename enable_if<is_trivially_copy_assignable<_Tp>::value, _Tp*>::type
        __unwrap_iter(__hq_wrap_iter<_Tp*>);

#else

template <class _Tp>
inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG
    typename enable_if<is_trivially_copy_assignable<_Tp>::value,
                       __hq_wrap_iter<_Tp*> >::type
    __unwrap_iter(__hq_wrap_iter<_Tp*> __i);

#endif

template <class _Iter>
class __hq_wrap_iter {
public:
  typedef _Iter iterator_type;
  typedef typename iterator_traits<iterator_type>::iterator_category
      iterator_category;
  typedef typename iterator_traits<iterator_type>::value_type value_type;
  typedef
      typename iterator_traits<iterator_type>::difference_type difference_type;
  typedef typename iterator_traits<iterator_type>::pointer pointer;
  typedef typename iterator_traits<iterator_type>::reference reference;

private:
  iterator_type __i;

public:
  _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG
  __hq_wrap_iter() _NOEXCEPT
#if _LIBCPP_STD_VER > 11
      : __i {
  }
#endif
  {
#if _LIBCPP_DEBUG_LEVEL >= 2
    __get_db()->__insert_i(this);
#endif
  }
  template <class _Up>
  _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG __hq_wrap_iter(
      const __hq_wrap_iter<_Up>& __u,
      typename enable_if<is_convertible<_Up, iterator_type>::value>::type* =
          0) _NOEXCEPT : __i(__u.base()) {
#if _LIBCPP_DEBUG_LEVEL >= 2
    __get_db()->__iterator_copy(this, &__u);
#endif
  }
#if _LIBCPP_DEBUG_LEVEL >= 2
  _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG
  __hq_wrap_iter(const __hq_wrap_iter& __x)
      : __i(__x.base()) {
    __get_db()->__iterator_copy(this, &__x);
  }
  _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG __hq_wrap_iter&
  operator=(const __hq_wrap_iter& __x) {
    if (this != &__x) {
      __get_db()->__iterator_copy(this, &__x);
      __i = __x.__i;
    }
    return *this;
  }
  _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG ~__hq_wrap_iter() {
    __get_db()->__erase_i(this);
  }
#endif
  _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG reference
  operator*() const _NOEXCEPT {
#if _LIBCPP_DEBUG_LEVEL >= 2
    _LIBCPP_ASSERT(__get_const_db()->__dereferenceable(this),
                   "Attempted to dereference a non-dereferenceable iterator");
#endif
    return *__i;
  }
  _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG pointer
  operator->() const _NOEXCEPT {
#if _LIBCPP_DEBUG_LEVEL >= 2
    _LIBCPP_ASSERT(__get_const_db()->__dereferenceable(this),
                   "Attempted to dereference a non-dereferenceable iterator");
#endif
    return (pointer)_VSTD::addressof(*__i);
  }
  _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG __hq_wrap_iter&
  operator++() _NOEXCEPT {
#if _LIBCPP_DEBUG_LEVEL >= 2
    _LIBCPP_ASSERT(__get_const_db()->__dereferenceable(this),
                   "Attempted to increment non-incrementable iterator");
#endif
    ++__i;
    return *this;
  }
  _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG __hq_wrap_iter
  operator++(int) _NOEXCEPT {
    __hq_wrap_iter __tmp(*this);
    ++(*this);
    return __tmp;
  }

  _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG __hq_wrap_iter&
  operator--() _NOEXCEPT {
#if _LIBCPP_DEBUG_LEVEL >= 2
    _LIBCPP_ASSERT(__get_const_db()->__decrementable(this),
                   "Attempted to decrement non-decrementable iterator");
#endif
    --__i;
    return *this;
  }
  _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG __hq_wrap_iter
  operator--(int) _NOEXCEPT {
    __hq_wrap_iter __tmp(*this);
    --(*this);
    return __tmp;
  }
  _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG __hq_wrap_iter
  operator+(difference_type __n) const _NOEXCEPT {
    __hq_wrap_iter __w(*this);
    __w += __n;
    return __w;
  }
  _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG __hq_wrap_iter&
  operator+=(difference_type __n) _NOEXCEPT {
#if _LIBCPP_DEBUG_LEVEL >= 2
    _LIBCPP_ASSERT(__get_const_db()->__addable(this, __n),
                   "Attempted to add/subtract iterator outside of valid range");
#endif
    __i += __n;
    return *this;
  }
  _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG __hq_wrap_iter
  operator-(difference_type __n) const _NOEXCEPT {
    return *this + (-__n);
  }
  _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG __hq_wrap_iter&
  operator-=(difference_type __n) _NOEXCEPT {
    *this += -__n;
    return *this;
  }
  _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG reference
  operator[](difference_type __n) const _NOEXCEPT {
#if _LIBCPP_DEBUG_LEVEL >= 2
    _LIBCPP_ASSERT(__get_const_db()->__subscriptable(this, __n),
                   "Attempted to subscript iterator outside of valid range");
#endif
    return __i[__n];
  }

  _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG iterator_type
  base() const _NOEXCEPT {
    return __i;
  }

private:
#if _LIBCPP_DEBUG_LEVEL >= 2
  _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG
  __hq_wrap_iter(const void* __p, iterator_type __x)
      : __i(__x) {
    __get_db()->__insert_ic(this, __p);
  }
#else
  _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG
  __hq_wrap_iter(iterator_type __x) _NOEXCEPT : __i(__x) {}
#endif

  template <class _Up>
  friend class __hq_wrap_iter;
  template <class _CharT, class _Traits, class _Alloc, bool _Private>
  friend class hq_basic_string;
  template <class _Tp, class _Alloc>
  friend class _LIBCPP_TEMPLATE_VIS hq_vector;
  template <class _Tp, size_t>
  friend class _LIBCPP_TEMPLATE_VIS hq_span;

  template <class _Iter1, class _Iter2>
  _LIBCPP_CONSTEXPR_IF_NODEBUG friend bool
  operator==(const __hq_wrap_iter<_Iter1>&,
             const __hq_wrap_iter<_Iter2>&) _NOEXCEPT;

  template <class _Iter1, class _Iter2>
  _LIBCPP_CONSTEXPR_IF_NODEBUG friend bool
  operator<(const __hq_wrap_iter<_Iter1>&,
            const __hq_wrap_iter<_Iter2>&) _NOEXCEPT;

  template <class _Iter1, class _Iter2>
  _LIBCPP_CONSTEXPR_IF_NODEBUG friend bool
  operator!=(const __hq_wrap_iter<_Iter1>&,
             const __hq_wrap_iter<_Iter2>&) _NOEXCEPT;

  template <class _Iter1, class _Iter2>
  _LIBCPP_CONSTEXPR_IF_NODEBUG friend bool
  operator>(const __hq_wrap_iter<_Iter1>&,
            const __hq_wrap_iter<_Iter2>&) _NOEXCEPT;

  template <class _Iter1, class _Iter2>
  _LIBCPP_CONSTEXPR_IF_NODEBUG friend bool
  operator>=(const __hq_wrap_iter<_Iter1>&,
             const __hq_wrap_iter<_Iter2>&) _NOEXCEPT;

  template <class _Iter1, class _Iter2>
  _LIBCPP_CONSTEXPR_IF_NODEBUG friend bool
  operator<=(const __hq_wrap_iter<_Iter1>&,
             const __hq_wrap_iter<_Iter2>&) _NOEXCEPT;

#ifndef _LIBCPP_CXX03_LANG
  template <class _Iter1, class _Iter2>
  _LIBCPP_CONSTEXPR_IF_NODEBUG friend auto
  operator-(const __hq_wrap_iter<_Iter1>& __x,
            const __hq_wrap_iter<_Iter2>& __y) _NOEXCEPT
      -> decltype(__x.base() - __y.base());
#else
  template <class _Iter1, class _Iter2>
  _LIBCPP_CONSTEXPR_IF_NODEBUG friend
      typename __hq_wrap_iter<_Iter1>::difference_type
      operator-(const __hq_wrap_iter<_Iter1>&,
                const __hq_wrap_iter<_Iter2>&) _NOEXCEPT;
#endif

  template <class _Iter1>
  _LIBCPP_CONSTEXPR_IF_NODEBUG friend __hq_wrap_iter<_Iter1>
  operator+(typename __hq_wrap_iter<_Iter1>::difference_type,
            __hq_wrap_iter<_Iter1>) _NOEXCEPT;

  template <class _Ip, class _Op>
  friend _Op copy(_Ip, _Ip, _Op);
  template <class _B1, class _B2>
  friend _B2 copy_backward(_B1, _B1, _B2);
  template <class _Ip, class _Op>
  friend _Op move(_Ip, _Ip, _Op);
  template <class _B1, class _B2>
  friend _B2 move_backward(_B1, _B1, _B2);

#if _LIBCPP_DEBUG_LEVEL < 2
  template <class _Tp>
  _LIBCPP_CONSTEXPR_IF_NODEBUG friend
      typename enable_if<is_trivially_copy_assignable<_Tp>::value, _Tp*>::type
          __unwrap_iter(__hq_wrap_iter<_Tp*>);
#else
  template <class _Tp>
  inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG
      typename enable_if<is_trivially_copy_assignable<_Tp>::value,
                         __hq_wrap_iter<_Tp*> >::type
      __unwrap_iter(__hq_wrap_iter<_Tp*> __i);
#endif
};

template <class _Iter1, class _Iter2>
inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG bool
operator==(const __hq_wrap_iter<_Iter1>& __x,
           const __hq_wrap_iter<_Iter2>& __y) _NOEXCEPT {
  return __x.base() == __y.base();
}

template <class _Iter1, class _Iter2>
inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG bool
operator<(const __hq_wrap_iter<_Iter1>& __x,
          const __hq_wrap_iter<_Iter2>& __y) _NOEXCEPT {
#if _LIBCPP_DEBUG_LEVEL >= 2
  _LIBCPP_ASSERT(__get_const_db()->__less_than_comparable(&__x, &__y),
                 "Attempted to compare incomparable iterators");
#endif
  return __x.base() < __y.base();
}

template <class _Iter1, class _Iter2>
inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG bool
operator!=(const __hq_wrap_iter<_Iter1>& __x,
           const __hq_wrap_iter<_Iter2>& __y) _NOEXCEPT {
  return !(__x == __y);
}

template <class _Iter1, class _Iter2>
inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG bool
operator>(const __hq_wrap_iter<_Iter1>& __x,
          const __hq_wrap_iter<_Iter2>& __y) _NOEXCEPT {
  return __y < __x;
}

template <class _Iter1, class _Iter2>
inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG bool
operator>=(const __hq_wrap_iter<_Iter1>& __x,
           const __hq_wrap_iter<_Iter2>& __y) _NOEXCEPT {
  return !(__x < __y);
}

template <class _Iter1, class _Iter2>
inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG bool
operator<=(const __hq_wrap_iter<_Iter1>& __x,
           const __hq_wrap_iter<_Iter2>& __y) _NOEXCEPT {
  return !(__y < __x);
}

template <class _Iter1>
inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG bool
operator!=(const __hq_wrap_iter<_Iter1>& __x,
           const __hq_wrap_iter<_Iter1>& __y) _NOEXCEPT {
  return !(__x == __y);
}

template <class _Iter1>
inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG bool
operator>(const __hq_wrap_iter<_Iter1>& __x,
          const __hq_wrap_iter<_Iter1>& __y) _NOEXCEPT {
  return __y < __x;
}

template <class _Iter1>
inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG bool
operator>=(const __hq_wrap_iter<_Iter1>& __x,
           const __hq_wrap_iter<_Iter1>& __y) _NOEXCEPT {
  return !(__x < __y);
}

template <class _Iter1>
inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG bool
operator<=(const __hq_wrap_iter<_Iter1>& __x,
           const __hq_wrap_iter<_Iter1>& __y) _NOEXCEPT {
  return !(__y < __x);
}

#ifndef _LIBCPP_CXX03_LANG
template <class _Iter1, class _Iter2>
inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG auto
operator-(const __hq_wrap_iter<_Iter1>& __x,
          const __hq_wrap_iter<_Iter2>& __y) _NOEXCEPT
    -> decltype(__x.base() - __y.base()) {
#if _LIBCPP_DEBUG_LEVEL >= 2
  _LIBCPP_ASSERT(__get_const_db()->__less_than_comparable(&__x, &__y),
                 "Attempted to subtract incompatible iterators");
#endif
  return __x.base() - __y.base();
}
#else
template <class _Iter1, class _Iter2>
inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG
    typename __hq_wrap_iter<_Iter1>::difference_type
    operator-(const __hq_wrap_iter<_Iter1>& __x,
              const __hq_wrap_iter<_Iter2>& __y) _NOEXCEPT {
#if _LIBCPP_DEBUG_LEVEL >= 2
  _LIBCPP_ASSERT(__get_const_db()->__less_than_comparable(&__x, &__y),
                 "Attempted to subtract incompatible iterators");
#endif
  return __x.base() - __y.base();
}
#endif

template <class _Iter>
inline _LIBCPP_INLINE_VISIBILITY
    _LIBCPP_CONSTEXPR_IF_NODEBUG __hq_wrap_iter<_Iter>
    operator+(typename __hq_wrap_iter<_Iter>::difference_type __n,
              __hq_wrap_iter<_Iter> __x) _NOEXCEPT {
  __x += __n;
  return __x;
}

template <class _Iter>
struct __libcpp_is_trivial_iterator<__hq_wrap_iter<_Iter> >
    : public _LIBCPP_BOOL_CONSTANT(__libcpp_is_trivial_iterator<_Iter>::value) {
};

_LIBCPP_END_NAMESPACE_STD

#endif // _LIBCPP_ITERATOR
